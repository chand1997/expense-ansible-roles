- name: Disable default nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: Enable nodejs:20
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: Install nodejs and mysql
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - mysql
    - nodejs

- name: Create a new user "expense"
  ansible.builtin.user:
    name: expense
    state: present

# - name: Ensure directory /app exists
#   ansible.builtin.file:
#     path: /app
#     state: directory

- name: common tasks
  include_role:
    name: common

# - name: Download source code
#   ansible.builtin.get_url:
#     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#     dest: /tmp/backend.zip

# - name: Unzip the source code in /app
#   ansible.builtin.unarchive:
#     src: /tmp/backend.zip
#     dest: /app
#     remote_src: yes
    # By default unarchive module searches src file("/tmp/backend.zip") in local server(ansible-server)
    # After giving "remote_src: yes", unarchive module searches src in remote server(backend-server)

- name: Install packages based on package.json.
  community.general.npm:
    path: /app

# if backend.service is a static file, we should use below code
# - name: Creating backend service.
#   ansible.builtin.copy:
#     src: backend.service
#     dest: /etc/systemd/system/backend.service

# if backend.service is a non-static file, we should use below code.
# it searches for templates folder in which files are in j2 formate where dynamic variables can be used.
- name: Creating backend service.
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: install python libs
  ansible.builtin.pip:
    name: "{{ item }}"
    executable: pip3.9
  loop:
    - cryptography
    - PyMySQL

- name: Import SQL file to MySQL
  ansible.builtin.mysql_db:
    name: all
    state: import
    target: /app/schema/backend.sql
    login_user: "{{ sql_user }}"
    login_password: "{{ sql_password }}"
    login_host: "{{ sql_host }}"

- name: Daemon-reload, restart and enabling backend.
  ansible.builtin.systemd_service:
    name: backend
    enabled: true
    state: restarted
    daemon_reload: true
